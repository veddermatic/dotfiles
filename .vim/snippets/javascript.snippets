snippet log
	console.log(${1});
snippet error
	console.error(${1});
snippet info
	console.info(${1});
snippet logs
	console.log("${1}");
snippet errors
	console.error("${1}");
snippet infos
	console.info("${1}");
snippet prom
	var promise = new Promise((resolve, reject) => {
		${1}
	});
	return promise;
snippet rcc
	import React from 'react';
	import PropTypes from 'prop-types';

	import './style.css';

	const ${1:className} = ({
		${2:prop}
	}) => (
		<div></div>
	);
	${3:$1}.propTypes = {
	};
	export default  ${4:$1};
snippet rc6
	import React from 'react'
	import PropTypes from 'prop-types';

	class ${1:className} extends React.Component {

		constructor (props) {
			super(props)
			this.state = {
			}
		}

		render () {
			return (
				${2:<div></div>}
			)
		}
	}
	${3:$1}.propTypes = {
	}
	export default ${4:$1}

snippet reduxcon
	import { connect } from 'react-redux';
	const mapStateToProps = ( state ) => ({
	});
	const mapDispatchToProps = ( dispatch ) => ({
	});
	//	export default connect( mapStateToProps, mapDispatchToProps )( ${1:name} );

snippet reduck
	const ${1:ACTION_TYPES} = {
		    ${2:ACTION_NAME}: '${3:$2}',
	};

	const initialState = {
	};

	export default ( state = initialState, action = null ) => {
		if ( !action ) {
			state;
		}
		switch( action.type ) {
			default:
				return state;
		}
	};

	export const ${4:actionName} = () => ({
		    type: ${5:$1}.${6:$2},
	});
snippet actiont
	${1:name}: '${2:$1}',
snippet action
	export const ${1:actionName} = ( ${2:data} ) => ({
		type: ${3:TYPE.NAME},
	});
snippet thunk
	export const ${1:actionName} = ( ${2} ) => {
		return ( dispatch, getState ) => ({
		});
	};
snippet rcwm
	componentWillMount() {
		${1}
	}
snippet rss
	this.setState({
		${1:key}: ${2:val}
	});
snippet rcdm
	componentDidMount() {
		${1}
	}
snippet rcwu
	componentWillUnmount() {
		${1}
	}
snippet rmeth
	${1:methodName}( ${2:params} ) {
		${3:code}
	}
	this.${4:$1} = this.{$5:$1}.bind( this )
snippet reactest
	import React from 'react';
	import ReactDOM from 'react-dom';
	import { shallow, mount } from 'enzyme';
	import ${1:component} from './index';

	it('renders without crashing', () => {
		    const _d = document.createElement('div');
			ReactDOM.render(<${2:$1} />, _d);
	});
snippet jdesc
	describe( '${1:description}', () => {
		it( '${2:description}', () => {
			${3:code}
		});
	});
snippet jtest
	it( '${1:description}', () => {
		${2:code}
	});
snippet jrtest
	it( '${1:description}', () => {
		const _initial = { ${2:state} };
		const _action = ${3:action};
		const _r = reducer( _initial, _action );
		expect( _r.${4:code} ).toBe( ${5:result} );
	});
